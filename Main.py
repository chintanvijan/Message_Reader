#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Aug 07, 2018 08:46:23 PM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Main_support
from speech import readandspeak as rs
from Readfile import readfile as rf
import multiprocessing
from multiprocessing.pool import ThreadPool
_FINISH = False
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel (root)
    Main_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = New_Toplevel (w)
    Main_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("600x450+650+150")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")



        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.05, rely=0.24,height=124, relwidth=0.82)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(width=494)

        def func():
      
        	t = self.Entry1.get()
        	#rs.speak(t)
        	"""
            if _FINISH == True:
        		rf.stop()
        	for i in t:
        		word = t.split(" ")
        	
        	if _FINISH == False:
        		p2 = multiprocessing.Process(name='p2',target=rs.speak,args=(word,))
        		p2.start()
                """
        def clear():
        	self.Entry1.delete(0,END)
        """
        def stop_main():
        	global _FINISH
        	pool=ThreadPool(processes=1)
        	pool.apply_async(func)
        	_FINISH = True
        	pool.terminate()
        	pool.join()    		
    		"""
        self.Button1 = Button(top,command=clear)
        self.Button1.place(relx=0.22, rely=0.64, height=33, width=74)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''clear''')
        self.Button1.configure(width=74)

        self.Button2 = Button(top,command=func)
        self.Button2.place(relx=0.42, rely=0.64, height=33, width=92)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Speak''')
        self.Button2.configure(width=92)

        self.Button3 = Button(top,command=rf.read1)
        self.Button3.place(relx=0.62, rely=0.64, height=33, width=92)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Read file''')
        self.Button3.configure(width=92)

        def stop_process():
        	root.after(1,rf.stop)

        self.Button4 = Button(top,command=rf.stop)
        self.Button4.place(relx=0.82, rely=0.64, height=33, width=92)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Stop''')
        self.Button4.configure(width=92)





if __name__ == '__main__':
	#p1 = multiprocessing.Process(name='p1',target=vp_start_gui)
	#p1.start()
    vp_start_gui()



